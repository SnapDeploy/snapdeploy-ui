/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description Returns the health status of the API
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user information
         * @description Returns information about the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User information retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/repos/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync user repositories from GitHub
         * @description Syncs the repositories for a user from GitHub
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Repositories synced successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRepositoriesSyncResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user repositories with search
         * @description Returns the repositories for a user with pagination and optional search. Search queries match against repository name, full name, and description.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (default is 1) */
                    page?: number;
                    /** @description Number of items per page (default is 20, max is 100) */
                    limit?: number;
                    /**
                     * @description Search query to filter repositories by name, full name, or description
                     * @example react
                     */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Repositories retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserRepositoriesResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user projects
         * @description Returns all projects for a user with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (default is 1) */
                    page?: number;
                    /** @description Number of items per page (default is 20, max is 100) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Projects retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectListResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        /**
         * Create a new project
         * @description Creates a new project for a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateProjectRequest"];
                };
            };
            responses: {
                /** @description Project created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                /** @description Project with this repository URL already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a project by ID
         * @description Returns a single project by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Project ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        /**
         * Update a project
         * @description Updates an existing project
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Project ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateProjectRequest"];
                };
            };
            responses: {
                /** @description Project updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Project"];
                    };
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                /** @description You don't have permission to update this project */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        post?: never;
        /**
         * Delete a project
         * @description Deletes a project
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Project ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                /** @description You don't have permission to delete this project */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                404: components["responses"]["NotFoundError"];
                500: components["responses"]["InternalServerError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @enum {string} */
            status?: "healthy" | "unhealthy";
            /** Format: date-time */
            timestamp?: string;
            version?: string;
        };
        User: {
            /** Format: uuid */
            id?: string;
            /** Format: email */
            email?: string;
            username?: string;
            /** @description Indicates whether the user has synced any repositories */
            hasSyncedRepositories?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        UserRepositoriesSyncResponse: {
            message?: string;
        };
        UserRepositoriesResponse: {
            repositories?: components["schemas"]["Repository"][];
            pagination?: components["schemas"]["Pagination"];
        };
        Repository: {
            /**
             * Format: uuid
             * @description Repository unique identifier
             */
            id?: string;
            /**
             * @description Repository name
             * @example my-react-app
             */
            name?: string;
            /**
             * @description Full repository name (owner/repo)
             * @example user/my-react-app
             */
            full_name?: string;
            /**
             * @description Repository description
             * @example A React application for managing tasks
             */
            description?: string | null;
            /**
             * @description API URL for the repository
             * @example https://api.github.com/repos/user/my-react-app
             */
            url?: string;
            /**
             * @description Web URL for the repository
             * @example https://github.com/user/my-react-app
             */
            html_url?: string | null;
            /**
             * @description Whether the repository is private
             * @example false
             */
            private?: boolean;
            /**
             * @description Whether the repository is a fork
             * @example false
             */
            fork?: boolean;
            /**
             * @description Number of stars
             * @example 42
             */
            stars?: number;
            /**
             * @description Number of watchers
             * @example 15
             */
            watchers?: number;
            /**
             * @description Number of forks
             * @example 7
             */
            forks?: number;
            /**
             * @description Primary programming language
             * @example JavaScript
             */
            language?: string | null;
            /**
             * Format: date-time
             * @description Repository creation timestamp
             * @example 2024-01-15T10:30:00Z
             */
            created_at?: string;
        };
        Pagination: {
            /** @description Current page number */
            page?: number;
            /** @description Number of items per page */
            limit?: number;
            /** @description Total number of items */
            total?: number;
            /** @description Total number of pages */
            total_pages?: number;
        };
        CreateProjectRequest: {
            /**
             * @description Repository URL
             * @example https://github.com/user/my-app
             */
            repository_url: string;
            /**
             * @description Install command to execute (installs dependencies)
             * @example npm install
             */
            install_command: string;
            /**
             * @description Build command to execute
             * @example npm run build
             */
            build_command: string;
            /**
             * @description Run command to execute
             * @example npm start
             */
            run_command: string;
            /**
             * @description Programming language or framework
             * @example NODE_TS
             * @enum {string}
             */
            language: "NODE" | "NODE_TS" | "NEXTJS" | "GO" | "PYTHON";
        };
        UpdateProjectRequest: {
            /**
             * @description Repository URL
             * @example https://github.com/user/my-app
             */
            repository_url: string;
            /**
             * @description Install command to execute (installs dependencies)
             * @example npm install
             */
            install_command: string;
            /**
             * @description Build command to execute
             * @example npm run build
             */
            build_command: string;
            /**
             * @description Run command to execute
             * @example npm start
             */
            run_command: string;
            /**
             * @description Programming language or framework
             * @example NODE_TS
             * @enum {string}
             */
            language: "NODE" | "NODE_TS" | "NEXTJS" | "GO" | "PYTHON";
        };
        Project: {
            /**
             * Format: uuid
             * @description Project unique identifier
             */
            id?: string;
            /**
             * Format: uuid
             * @description User ID who owns the project
             */
            user_id?: string;
            /**
             * @description Repository URL
             * @example https://github.com/user/my-app
             */
            repository_url?: string;
            /**
             * @description Install command to execute (installs dependencies)
             * @example npm install
             */
            install_command?: string;
            /**
             * @description Build command to execute
             * @example npm run build
             */
            build_command?: string;
            /**
             * @description Run command to execute
             * @example npm start
             */
            run_command?: string;
            /**
             * @description Programming language or framework
             * @example NODE_TS
             * @enum {string}
             */
            language?: "NODE" | "NODE_TS" | "NEXTJS" | "GO" | "PYTHON";
            /**
             * Format: date-time
             * @description Project creation timestamp
             */
            created_at?: string;
            /**
             * Format: date-time
             * @description Project last update timestamp
             */
            updated_at?: string;
        };
        ProjectListResponse: {
            projects?: components["schemas"]["Project"][];
            pagination?: components["schemas"]["Pagination"];
        };
        Error: {
            error?: string;
            message?: string;
            details?: {
                [key: string]: unknown;
            };
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
